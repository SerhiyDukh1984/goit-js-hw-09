{"mappings":"AAAA,MAAMA,EAASC,SAASC,cAAc,SACtBD,SAASC,cAAc,kBACxBD,SAASC,cAAc,iBACrBD,SAASC,cAAc,mBACpBD,SAASC,cAAc,UAE3C,IAAIC,EAAQ,KACRC,EAAO,KACPC,EAAS,GACTC,EAAW,EAEfN,EAAOO,iBAAiB,UAExB,SAAuBC,GACrBA,EAAEC,iBACF,MAAMC,EAAiBF,EAAEG,cAAcC,SAEvCT,EAAQU,OAAOH,EAAeI,MAAMC,OACpCX,EAAOS,OAAOH,EAAeM,KAAKD,OAClC,IAAIE,EAAcJ,OAAOH,EAAeQ,OAAOH,OAE/C,IAAK,IAAII,EAAI,EAAGA,GAAKF,EAAaE,GAAK,EACrCd,EAAOe,KAAKD,GAGdd,EAAOgB,KAAIC,IAiBb,IAAuBC,EAAUC,EAhB7BlB,EAAWgB,EACM,IAAbhB,IACFH,GAASC,IAcQmB,EAXLjB,EAWekB,EAXLrB,EAYnB,IAAIsB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,CAAEM,SAAAT,EAAUT,MAAAU,IAEpBG,EAAO,CAAEK,SAAAT,EAAUT,MAAAU,MAEpBA,OAnBAS,MAAK,EAAGD,SAAAE,EAAUpB,MAAAqB,MACjBC,QAAQC,IAAI,uBAAqBH,QAAiBC,UAGnDG,OAAM,EAAGN,SAAAO,EAAUzB,MAAA0B,MAClBJ,QAAQC,IAAI,sBAAoBE,QAAeC","sources":["src/js/03-promises.js"],"sourcesContent":["const formEl = document.querySelector('.form');\nconst delayEl = document.querySelector('[name=\"delay\"]');\nconst stepEl = document.querySelector('[name=\"step\"]');\nconst amountEl = document.querySelector('[name=\"amount\"]');\nconst btnSubmitEl = document.querySelector('button');\n\nlet delay = null;\nlet step = null;\nlet amount = [];\nlet position = 0;\n\nformEl.addEventListener('submit', onSubmitClick);\n\nfunction onSubmitClick(e) {\n  e.preventDefault();\n  const elementsOfForm = e.currentTarget.elements;\n\n  delay = Number(elementsOfForm.delay.value);\n  step = Number(elementsOfForm.step.value);\n  let amountInput = Number(elementsOfForm.amount.value);\n\n  for (let i = 1; i <= amountInput; i += 1) {\n    amount.push(i);\n  }\n\n  amount.map(number => {\n    position = number;\n    if (position !== 1) {\n      delay += step;\n    }\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n\n      .catch(({ position, delay }) => {\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  });\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$position","addEventListener","e","preventDefault","elementsOfForm","currentTarget","elements","Number","delay","value","step","amountInput","amount","i","push","map","number","position3","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","then","position1","delay1","console","log","catch","position2","delay2"],"version":3,"file":"03-promises.393b1971.js.map"}